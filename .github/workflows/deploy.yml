name: Deploy Software AI


on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  NODE_VERSION: '22.x'

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add remote host to known_hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        echo "known_hosts:"
        cat ~/.ssh/known_hosts 

    - name: Copy entire project to VPS
      run: |
        rsync -avz --delete ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/home/administrator/deploys/softwareai \
          --exclude node_modules \
          --exclude .git \
          --exclude frontend/web/node_modules
          --exclude electron/web/node_modules

    - name: Make dir on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          mkdir -p /home/administrator/deploys/softwareai/backend/Keys && \
          mkdir -p /home/administrator/deploys/softwareai/frontend/web
        "

    - name: Create keys.env on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          printf '%s' '${{ secrets.BACK_END_ENV_KEYS }}' > /home/administrator/deploys/softwareai/backend/Keys/keys.env
        "

    - name: Create .env on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          printf '%s' '${{ secrets.FRONT_END_ENV_KEYS }}' > /home/administrator/deploys/softwareai/frontend/web/.env
        "

    - name: Create COMPOSE on VPS
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          echo '${{ secrets.COMPOSE }}' | base64 --decode > /home/administrator/deploys/softwareai/docker-compose.yml
        "

    - name: Deploy Docker Compose
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          cd /home/administrator/deploys/softwareai && \

          docker rm -f softwareai_frontend softwareai_api || true && \
          docker container prune && \
          docker compose up --build -d --no-deps softwareai_frontend softwareai_api
        "

  build-electron:
    name: "⚡ Build Electron App"
    runs-on: windows-latest
    needs: build-and-deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Modules
        run: npm install
      - name: Install Electron
        run: npm install --save-dev electron@latest
      - name: Download frontend/electron build
        uses: actions/download-artifact@v4
        with:
          name: vite-dist
          path: dist
      - name: Copy frontend/electron to Electron
        shell: bash           # ⬅️ use Bash em vez de pwsh
        run: |
          mkdir -p public
          cp -r dist/* public/
      - name: Build Electron App
        run: npx electron-builder --win --publish never
      - uses: actions/upload-artifact@v4
        with:
          name: electron-app
          path: dist/*.exe    # ◀️ captura o instalador Windows

  release:
    name: "🚀 Create GitHub Release"
    runs-on: ubuntu-latest
    needs: build-electron
    if: github.event.pull_request.merged == true
    permissions:
      contents: write 
    steps:
      - name: "Checkout code (to read package.json)"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Setup Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Get version from package.json"
        id: get_version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: "Download Electron artifact"
        uses: actions/download-artifact@v4
        with:
          name: electron-app
          path: ./release-assets

      - name: Delete existing release (if any)
        run: |
          version=v${{ steps.get_version.outputs.version }}
          gh release delete "$version" --yes || true
          git push --delete origin "$version" || true
          
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create GitHub Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: "Release v${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
          files: |
            ./release-assets/**  